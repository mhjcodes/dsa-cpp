#include<iostream>
#include<queue>
using namespace std;
class node{
    public:
       int data;
       node* left;
       node* right;
    
    node(int d){
        this-> data = d;
        this-> left = NULL;
        this-> right = NULL;
    }
};

node* buildtree(node* root){
    
    cout<<"Enter data "<<endl;
    int data;
    cin >> data;
    root = new node(data);

    if(data == -1) // base case
    return NULL;

    cout<< "Enter data for inserting left of" << data << endl;
    root->left = buildtree(root-> left);

    cout<< "Enter data for inserting right of" << data << endl;
    root->right = buildtree(root-> right);

    return root;
}
void levelOrderTraversal(node* root){
    // using queue data structure

    queue<node*> q;
    q.push(root);
    q.push(NULL);  // for level 0

    while(!q.empty()){
        node* temp = q.front();
        q.pop();
        if(temp == NULL){
            // completion of level 
            cout<<endl;

            if(!q.empty()) // once a level is complete, already next level nodes are inserted
            q.push(NULL) ;  // for next level
        }
        else{
              
              cout<< temp->data <<" ";
              if( temp-> left)
              q.push(temp-> left);

              if( temp-> right)
              q.push(temp-> right);
        }

    }

}

int main(){
    node* root = NULL;
    
    // build a tree                  1 3 7 -1 -1 11 -1 -1 5 17 -1 -1 -1
    root = buildtree(root); 

    // Level order traversal
    cout << "Level Order Traversal: "<<endl;
    levelOrderTraversal(root);
    
    return 0;
}
